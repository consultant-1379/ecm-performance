<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="4.0" jmeter="4.0 r1823414">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="ECM GUI Test" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="non-HA-GUI-Browsing" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${loops}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${users}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${rampup}</stringProp>
        <longProp name="ThreadGroup.start_time">1497038026000</longProp>
        <longProp name="ThreadGroup.end_time">1497038026000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config - Tenants username" enabled="true">
          <stringProp name="filename">/app/test_plans/GUI/non_ha/GUI_tenants.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">tenant,username</stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
        </CSVDataSet>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="false">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
        </CookieManager>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.config.FirefoxDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.FirefoxDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.FirefoxDriverConfig" testname="jp@gc - Firefox Driver Config" enabled="true">
          <stringProp name="WebDriverConfig.proxy_type">DIRECT</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host"></stringProp>
          <intProp name="WebDriverConfig.http_port">8080</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">false</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">true</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">false</boolProp>
          <boolProp name="FirefoxDriverConfig.general.useragent.override.enabled">false</boolProp>
          <boolProp name="FirefoxDriverConfig.network.negotiate-auth.allow-insecure-ntlm-v1">false</boolProp>
          <collectionProp name="FirefoxDriverConfig.general.extensions"/>
          <collectionProp name="FirefoxDriverConfig.general.preferences"/>
        </com.googlecode.jmeter.plugins.webdriver.config.FirefoxDriverConfig>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc - Chrome Driver Config" enabled="false">
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host"></stringProp>
          <intProp name="WebDriverConfig.http_port">8080</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">false</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">true</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">false</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">/home/perftest1/chromedriver</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.insecurecerts_enabled">false</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler -  ECM Get 1st Page Website" enabled="true">
          <stringProp name="WebDriverSampler.script">// 2 minutes max timeout that will throw an error if expires
//var firefox = JavaImporter(org.openqa.selenium.firefox.FirefoxDriver)
var wait = new org.openqa.selenium.support.ui.WebDriverWait(WDS.browser, 120)
WDS.sampleResult.setSampleLabel(&apos;URL sample&apos;)
WDS.sampleResult.sampleStart() //sample starting point

//WDS.browser.get(&apos;${website}&apos;) // read from CSV Data Source file
WDS.browser.get(&apos;${website}/${tenant}&apos;) // read from User Defined Variables and CSV Data Source file
//Wait for page loaded with Login
try {
wait.until(org.openqa.selenium.support.ui.ExpectedConditions.titleContains(&quot;Login&quot;))
var loginReady=WDS.browser.findElement(org.openqa.selenium.By.id(&apos;Login.Submit&apos;)) 
}
catch(err) {
    PageNotLoaded = (&apos;Error: Initial-Login Page load Timed out&apos;)
    WDS.log.info(PageNotLoaded)
} 
finally {
//WDS.log.info(loginReady)
}
// id=&quot;Login.Submit&quot;
WDS.sampleResult.sampleEnd()

//java.lang.Thread.sleep(&apos;${wait10}&apos;) // wait before starting login
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
            <stringProp name="ConstantTimer.delay">5000</stringProp>
          </ConstantTimer>
          <hashTree/>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler -  ECM Login" enabled="true">
          <stringProp name="TestPlan.comments">- after GUI login, dashboard is displayed for 15 minutes</stringProp>
          <stringProp name="WebDriverSampler.script">var wait = new org.openqa.selenium.support.ui.WebDriverWait(WDS.browser, 120)
var element=WDS.browser.findElement(org.openqa.selenium.By.id(&apos;IDToken1&apos;))
element.sendKeys([&apos;${username}&apos;]) 

var passwordField = WDS.browser.findElement(org.openqa.selenium.By.id(&apos;IDToken2&apos;)) //define username field
passwordField.sendKeys([&apos;${password}&apos;]) // read from User Defined Variables

var disclaimerBoxbutton
try {
disclaimerBoxbutton = WDS.browser.findElement(org.openqa.selenium.By.id(&apos;cbxDisclaimer&apos;)) //
disclaimerBoxbutton.click() //click 
}
catch(err) {
    disclaimerBoxbutton = (&apos;Error&apos;)
//    WDS.log.info(WDS.name + &apos; --* disclaimerBoxbutt Error *--&apos;) //log message
} 
finally {

var loginButton=WDS.browser.findElement(org.openqa.selenium.By.id(&apos;Login.Submit&apos;)) //define login submit button
loginButton.click() //click on the login button

WDS.sampleResult.setSampleLabel(&apos;Login sample&apos;)
WDS.sampleResult.sampleStart() //sample starting point

// It looks for &quot;&quot;Tenant Dashboard&quot; text to assess if page loaded completely after login  
//  xpath=/html/body/div[2]/div/div[2]/div[1]/h1/span
try {
wait.until(org.openqa.selenium.support.ui.ExpectedConditions.textToBePresentInElementLocated(org.openqa.selenium.By.xpath(&quot;/html/body/div[2]/div/div[2]/div[1]/h1/span&quot;), &quot;Tenant Dashboard&quot;))
var tenantDashboard=WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;/html/body/div[2]/div/div[2]/div[1]/h1/span&quot;)) 
}
catch(err) {
    DashboardNotLoaded = (&apos;Error: Dashboard Page load Timed out&apos;)
    WDS.log.info(DashboardNotLoaded)
} 
finally {
//WDS.log.info(tenantDashboard)
}

WDS.sampleResult.sampleEnd() // sample end point

}


    





</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
            <stringProp name="ConstantTimer.delay">5000</stringProp>
          </ConstantTimer>
          <hashTree/>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </LoopController>
        <hashTree>
          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler -  ECM Dashboard" enabled="true">
            <stringProp name="TestPlan.comments">- after GUI login, dashboard is displayed for XX minutes</stringProp>
            <stringProp name="WebDriverSampler.script">WDS.sampleResult.setSampleLabel(&apos;Dashboard sample&apos;)
WDS.sampleResult.sampleStart() //sample starting point

java.lang.Thread.sleep(60000 * &apos;${dashboard_wait}&apos;)
// stay on Dashboard page for dashboard_wait minutes
//java.lang.Thread.sleep(&apos;${wait600}&apos;)

WDS.sampleResult.sampleEnd()




    





</stringProp>
            <stringProp name="WebDriverSampler.parameters"></stringProp>
            <stringProp name="WebDriverSampler.language">javascript</stringProp>
          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
              <stringProp name="ConstantTimer.delay">5000</stringProp>
            </ConstantTimer>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler-Tenant Click on VDCs Link &amp; Details" enabled="true">
            <stringProp name="TestPlan.comments"> - then click on vdc_0000 for details
 - then click on &amp;quot;View all Virtual Data Centers&amp;quot; to get the VDCs list
 - then click on vdc_0001 for details and on &amp;quot;View all Virtual Data Centers&amp;quot; to get the VDCs list
 - then click on vdc_0002 for details and on &amp;quot;View all Virtual Data Centers&amp;quot; to get the VDCs list</stringProp>
            <stringProp name="WebDriverSampler.script">var wait = new org.openqa.selenium.support.ui.WebDriverWait(WDS.browser, 120)
WDS.browser.get(&apos;${website}/#asset/vdcs&apos;) // list of VDCs
//java.lang.Thread.sleep(&apos;${wait15}&apos;)

// ------- click on specific VDC # wait for VDCs Page to Load ----------------
try {
wait.until(org.openqa.selenium.support.ui.ExpectedConditions.elementToBeClickable(org.openqa.selenium.By.linkText(&apos;vdc_0000&apos;)))
var vdc_0000Button=WDS.browser.findElement(org.openqa.selenium.By.cssSelector (&quot;a[title=&apos;vdc_0000&apos;]&quot;))  
}
catch(err) {
    vdc_0000NotLoaded = (&apos;Error:  vdc_0000 Page load Timed out&apos;)
    WDS.log.info(vdc_0000NotLoaded)
} 
finally {
//WDS.log.info(vdc_0000Button)
}

WDS.sampleResult.setSampleLabel(&apos;VDCs sample&apos;)
WDS.sampleResult.sampleStart() //sample starting point
vdc_0000Button.click()
WDS.sampleResult.sampleEnd() // sample end point

// ------- click on list of VDCs # ----------------
try {
wait.until(org.openqa.selenium.support.ui.ExpectedConditions.elementToBeClickable(org.openqa.selenium.By.linkText(&apos;View VDC List&apos;)))
var all_VDCsLink=WDS.browser.findElement(org.openqa.selenium.By.linkText(&quot;View VDC List&quot;)) // list of VDCs
}
catch(err) {
    all_VDCsLinkNotLoaded = (&apos;Error:  list of VDCs Timed out&apos;)
    WDS.log.info(all_VDCsLinkNotLoaded)
} 
finally {
}
all_VDCsLink.click()
// ------- click on specific VDC # ----------------
try {
wait.until(org.openqa.selenium.support.ui.ExpectedConditions.elementToBeClickable(org.openqa.selenium.By.linkText(&apos;vdc_0001&apos;)))
var vdc_0001Button=WDS.browser.findElement(org.openqa.selenium.By.cssSelector (&quot;a[title=&apos;vdc_0001&apos;]&quot;))
}
catch(err) {
    vdc_0001NotLoaded = (&apos;Error:  vdc_0001 Page load Timed out&apos;)
    WDS.log.info(vdc_0001NotLoaded)
} 
finally {
vdc_0001Button.click()
}
// ------- click on list of VDCs # ----------------
try {
wait.until(org.openqa.selenium.support.ui.ExpectedConditions.elementToBeClickable(org.openqa.selenium.By.linkText(&apos;View VDC List&apos;)))
var all_VDCsLink=WDS.browser.findElement(org.openqa.selenium.By.linkText(&quot;View VDC List&quot;)) // list of VDCs
}
catch(err) {
    all_VDCsLinkNotLoaded = (&apos;Error:  VDCs Link Page #1 load Timed out&apos;)
    WDS.log.info(all_VDCsLinkNotLoaded)
} 
finally {
}
all_VDCsLink.click()
// ------- click on specific VDC # ----------------
try {
wait.until(org.openqa.selenium.support.ui.ExpectedConditions.elementToBeClickable(org.openqa.selenium.By.linkText(&apos;vdc_0002&apos;)))
var vdc_0002Button=WDS.browser.findElement(org.openqa.selenium.By.cssSelector (&quot;a[title=&apos;vdc_0002&apos;]&quot;))
}
catch(err) {
    vdc_0002NotLoaded = (&apos;Error:  vdc_0002 Page load Timed out&apos;)
    WDS.log.info(vdc_0002NotLoaded)
} 
finally {
vdc_0002Button.click()
}
// ------- click on list of VDCs # ----------------
try {
wait.until(org.openqa.selenium.support.ui.ExpectedConditions.elementToBeClickable(org.openqa.selenium.By.linkText(&apos;View VDC List&apos;)))
var all_VDCsLink=WDS.browser.findElement(org.openqa.selenium.By.linkText(&quot;View VDC List&quot;)) // list of VDCs
}
catch(err) {
    all_VDCsLinkNotLoaded = (&apos;Error:  VDCs Link Page #2 load Timed out&apos;)
    WDS.log.info(all_VDCsLinkNotLoaded)
} 
finally {
}
all_VDCsLink.click()

java.lang.Thread.sleep(1000 * &apos;${user_wait}&apos;)
</stringProp>
            <stringProp name="WebDriverSampler.parameters"></stringProp>
            <stringProp name="WebDriverSampler.language">javascript</stringProp>
          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
          <hashTree/>
          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler-Tenant Gets Vapps List" enabled="true">
            <stringProp name="TestPlan.comments"> - starts with VDCs list
-  click on vdc_0000 for details
 - then click on &amp;quot;Virtual Applications&amp;quot; tab to get the VApps list
- then click on vapp_0000 for details</stringProp>
            <stringProp name="WebDriverSampler.script">var wait = new org.openqa.selenium.support.ui.WebDriverWait(WDS.browser, 120)
WDS.browser.get(&apos;${website}/#asset/vdcs&apos;) // list of VDCs

// ------- click on specific VDC # wait for VDCs Page to Load ----------------
try {
wait.until(org.openqa.selenium.support.ui.ExpectedConditions.elementToBeClickable(org.openqa.selenium.By.linkText(&apos;vdc_0000&apos;)))
var vdc_0000Button=WDS.browser.findElement(org.openqa.selenium.By.cssSelector (&quot;a[title=&apos;vdc_0000&apos;]&quot;))  
}
catch(err) {
    vdc_0000NotLoaded = (&apos;Error:  vdc_0000 Page load Timed out&apos;)
    WDS.log.info(vdc_0000NotLoaded)
} 
finally {
//WDS.log.info(vdc_0000Button)
}
vdc_0000Button.click()

///----- Select &quot;Virtual Applications&quot; tab
try {
wait.until(org.openqa.selenium.support.ui.ExpectedConditions.elementToBeClickable(org.openqa.selenium.By.xpath(&quot;//div[.=&apos;Virtual Applications&apos;]&quot;)))
var vapp_TabButton=WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;//div[.=&apos;Virtual Applications&apos;]&quot;))
}
catch(err) {
    vapp_TabNotLoaded = (&apos;Error:  vapp_Tab Page load Timed out&apos;)
    WDS.log.info(vapp_TabNotLoaded)
} 
finally {
//WDS.log.info(vapp_TabButton)
}
// ------- click on Virtual Applications TAB # ----------------
vapp_TabButton.click()

// ------- click on specific Vapp # ----------------
try {
wait.until(org.openqa.selenium.support.ui.ExpectedConditions.elementToBeClickable(org.openqa.selenium.By.linkText(&apos;vapp_0000&apos;)))
var vapp_0000Button=WDS.browser.findElement(org.openqa.selenium.By.cssSelector (&quot;a[title=&apos;vapp_0000&apos;]&quot;))
}
catch(err) {
    vapp_0000NotLoaded = (&apos;Error:  vapp_0000 Page load Timed out&apos;)
    WDS.log.info(vapp_0000NotLoaded)
} 
finally {
//WDS.log.info(vapp_0000Button)
}
WDS.sampleResult.setSampleLabel(&apos;VApps sample&apos;)
WDS.sampleResult.sampleStart() //sample starting point

vapp_0000Button.click()

// Verify &quot;Virtual Application (VAPP) Detail: VAPP Connection Points&quot; clickable
try {
wait.until(org.openqa.selenium.support.ui.ExpectedConditions.elementToBeClickable(org.openqa.selenium.By.xpath(&quot;//div[.=&apos;VAPP Connection Points&apos;]&quot;)))
var vapp_0000Details=WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;//div[.=&apos;VAPP Connection Points&apos;]&quot;)) 
}
catch(err) {
    Vapp_0000DetailsNotLoaded = (&apos;Error: Vapp_0000 Details Page load Timed out&apos;)
    WDS.log.info(Vapp_0000DetailsNotLoaded)
} 
finally {
//WDS.log.info(vapp_0000Details)
}

WDS.sampleResult.sampleEnd()  // sample end point

java.lang.Thread.sleep(1000 * &apos;${user_wait}&apos;)
</stringProp>
            <stringProp name="WebDriverSampler.parameters"></stringProp>
            <stringProp name="WebDriverSampler.language">javascript</stringProp>
          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
          <hashTree/>
          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler-Tenants Gets VMs List" enabled="true">
            <stringProp name="TestPlan.comments">- starts with VDCs list
-  click on vdc_0000 for details
 - then click on &amp;quot;Virtual Applications&amp;quot; tab to get the VApps list
- then click on vapp_0000 for details
- then click on VMs tab to get the VMs list</stringProp>
            <stringProp name="WebDriverSampler.script">var wait = new org.openqa.selenium.support.ui.WebDriverWait(WDS.browser, 120)
WDS.browser.get(&apos;${website}/#asset/vdcs&apos;) // list of VDCs
//java.lang.Thread.sleep(&apos;${wait15}&apos;)

// ------- click on specific VDC # wait for VDCs Page to Load ----------------
try {
wait.until(org.openqa.selenium.support.ui.ExpectedConditions.elementToBeClickable(org.openqa.selenium.By.linkText(&apos;vdc_0000&apos;)))
var vdc_0000Button=WDS.browser.findElement(org.openqa.selenium.By.cssSelector (&quot;a[title=&apos;vdc_0000&apos;]&quot;))  
}
catch(err) {
    vdc_0000NotLoaded = (&apos;Error:  vdc_0000 Page load Timed out&apos;)
    WDS.log.info(vdc_0000NotLoaded)
} 
finally {
//WDS.log.info(vdc_0000Button)
}
vdc_0000Button.click()

///----- Select &quot;VMs&quot; tab
try {
wait.until(org.openqa.selenium.support.ui.ExpectedConditions.elementToBeClickable(org.openqa.selenium.By.xpath(&quot;//div[.=&apos;VMs&apos;]&quot;)))
var vm_TabButton=WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;//div[.=&apos;VMs&apos;]&quot;))
}
catch(err) {
    vm_TabNotLoaded = (&apos;Error:  vm_Tab Page load Timed out&apos;)
    WDS.log.info(vm_TabNotLoaded)
} 
finally {
//WDS.log.info(vm_TabButton)
}

// ------- click on VMs TAB # ----------------
WDS.sampleResult.setSampleLabel(&apos;VMs sample&apos;)
WDS.sampleResult.sampleStart() //sample starting point
vm_TabButton.click()

// ------- click on VMs TAB ---- Verify page full loaded, check vm_vapp_0000_0000 is available in page
try {
wait.until(org.openqa.selenium.support.ui.ExpectedConditions.elementToBeClickable(org.openqa.selenium.By.xpath(&quot;//a[.=&apos;vm_vapp_0000_0000&apos;]&quot;)))
var vm_vapp_0000_0000=WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;//a[.=&apos;vm_vapp_0000_0000&apos;]&quot;))
}
catch(err) {
    vm_vappNotLoaded = (&apos;Error: VM vapp Page load Timed out&apos;)
    WDS.log.info(vm_vappNotLoaded)
} 
finally {
//WDS.log.info(vm_vapp_0000_0000)
}

WDS.sampleResult.sampleEnd()  // sample end point

java.lang.Thread.sleep(1000 * &apos;${user_wait}&apos;)</stringProp>
            <stringProp name="WebDriverSampler.parameters"></stringProp>
            <stringProp name="WebDriverSampler.language">javascript</stringProp>
          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
          <hashTree/>
          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler-Tenats Gets VN List" enabled="true">
            <stringProp name="TestPlan.comments">- starts with VDCs list -  click on vdc_0000 for details 
 - then click on &amp;quot;Virtual Applications&amp;quot; tab to get the VApps list 
- then click on vapp_0000 for details - then click on VNs tab to get the VNs list</stringProp>
            <stringProp name="WebDriverSampler.script">var wait = new org.openqa.selenium.support.ui.WebDriverWait(WDS.browser, 120)
WDS.browser.get(&apos;${website}/#asset/vdcs&apos;) // list of VDCs
//java.lang.Thread.sleep(&apos;${wait15}&apos;)

// ------- click on specific VDC # wait for VDCs Page to Load ----------------
try {
wait.until(org.openqa.selenium.support.ui.ExpectedConditions.elementToBeClickable(org.openqa.selenium.By.linkText(&apos;vdc_0000&apos;)))
var vdc_0000Button=WDS.browser.findElement(org.openqa.selenium.By.cssSelector (&quot;a[title=&apos;vdc_0000&apos;]&quot;))  
}
catch(err) {
    vdc_0000NotLoaded = (&apos;Error:  vdc_0000 Page load Timed out&apos;)
    WDS.log.info(vdc_0000NotLoaded)
} 
finally {
//WDS.log.info(vdc_0000Button)
}
vdc_0000Button.click()

//  VNs tab xpath = /html/body/div[2]/div/div/div[2]/div[4]/div[2]/div/div/div[1]/div[2]/div[5]/div

///----- Select &quot;VNs&quot; tab
try {
wait.until(org.openqa.selenium.support.ui.ExpectedConditions.elementToBeClickable(org.openqa.selenium.By.xpath(&quot;//div[.=&apos;Virtual Networks&apos;]&quot;)))
var vn_TabButton=WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;//div[.=&apos;Virtual Networks&apos;]&quot;))
}
catch(err) {
    vn_TabNotLoaded = (&apos;Error:  vn_Tab Page load Timed out&apos;)
    WDS.log.info(vn_TabNotLoaded)
} 
finally {
//WDS.log.info(vn_TabButton)
}

// ------- click on VNs TAB # ----------------
WDS.sampleResult.setSampleLabel(&apos;VNs sample&apos;)
WDS.sampleResult.sampleStart() //sample starting point
vn_TabButton.click()

// ------- click on VNs TAB ---- Verify page full loaded, check vn_0000 is available in page
// vn_0000 xpath = /html/body/div[2]/div/div/div[2]/div[4]/div[2]/div/div/div[2]/div/div/div/div[2]/div/div[2]/div/div[2]/div[2]/div[3]/div/div[2]/table/tbody/tr[1]/td[3]/div[2]/a

try {
wait.until(org.openqa.selenium.support.ui.ExpectedConditions.elementToBeClickable(org.openqa.selenium.By.xpath(&quot;//a[.=&apos;vn_0000&apos;]&quot;)))
var vn_0000=WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;//a[.=&apos;vn_0000&apos;]&quot;))
}
catch(err) {
    vn_NotLoaded = (&apos;Error: VN Page load Timed out&apos;)
    WDS.log.info(vn_NotLoaded)
} 
finally {
//WDS.log.info(vn_0000)
}

WDS.sampleResult.sampleEnd()  // sample end point

java.lang.Thread.sleep(1000 * &apos;${user_wait}&apos;)
</stringProp>
            <stringProp name="WebDriverSampler.parameters"></stringProp>
            <stringProp name="WebDriverSampler.language">javascript</stringProp>
          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
          <hashTree/>
        </hashTree>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler -  ECM Logout" enabled="true">
          <stringProp name="WebDriverSampler.script">var wait = new org.openqa.selenium.support.ui.WebDriverWait(WDS.browser, 120)
WDS.browser.get(&apos;${website}/#asset/vdcs&apos;) // list of VDCs
// VDC list : wait till page loaded
try {
wait.until(org.openqa.selenium.support.ui.ExpectedConditions.elementToBeClickable(org.openqa.selenium.By.linkText(&apos;vdc_0000&apos;))) 
var firstlogoutButton=WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;//div[.=&apos;${username}&apos;]&quot;))
}
catch(err) {
    firstlogoutButton = (&apos;Error: VDC list Page load Timed out&apos;)
    WDS.log.info(firstlogoutButton)
} 
finally {
firstlogoutButton.click()
}

var logoutButton=WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;//a[.=&apos;Logout&apos;]&quot;))
logoutButton.click()

WDS.sampleResult.setSampleLabel(&apos;Logout sample&apos;)
WDS.sampleResult.sampleStart() //sample starting point

var lastlogoutButton=WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;//span[.=&apos;Logout&apos;]&quot;))
lastlogoutButton.click() //click on the logout button

WDS.sampleResult.sampleEnd()//sample ending point




</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.SynthesisReportGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Synthesis Report (filtered)" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>false</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>false</message>
              <threadName>false</threadName>
              <dataType>false</dataType>
              <encoding>false</encoding>
              <assertions>false</assertions>
              <subresults>false</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename">${results}/GUI/${users}/raw/synthesis-${users}.csv</stringProp>
          <longProp name="interval_grouping">500</longProp>
          <boolProp name="graph_aggregated">false</boolProp>
          <stringProp name="include_sample_labels"></stringProp>
          <stringProp name="exclude_sample_labels">Setup.*</stringProp>
          <stringProp name="start_offset"></stringProp>
          <stringProp name="end_offset"></stringProp>
          <boolProp name="include_checkbox_state">false</boolProp>
          <boolProp name="exclude_checkbox_state">true</boolProp>
          <boolProp name="useGroupName">true</boolProp>
        </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
        <hashTree/>
        <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.ThreadsStateOverTimeGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Active Threads Over Time" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>false</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>false</message>
              <threadName>false</threadName>
              <dataType>false</dataType>
              <encoding>false</encoding>
              <assertions>false</assertions>
              <subresults>false</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename">${results}/GUI/${users}/raw/threads-${users}.csv</stringProp>
          <longProp name="interval_grouping">500</longProp>
          <boolProp name="graph_aggregated">false</boolProp>
          <stringProp name="include_sample_labels"></stringProp>
          <stringProp name="exclude_sample_labels"></stringProp>
          <stringProp name="start_offset"></stringProp>
          <stringProp name="end_offset"></stringProp>
          <boolProp name="include_checkbox_state">false</boolProp>
          <boolProp name="exclude_checkbox_state">false</boolProp>
        </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
        <hashTree/>
        <kg.apc.jmeter.perfmon.PerfMonCollector guiclass="kg.apc.jmeter.vizualizers.PerfMonGui" testclass="kg.apc.jmeter.perfmon.PerfMonCollector" testname="jp@gc - PerfMon System Metrics Collector CPU" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>false</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>false</message>
              <threadName>false</threadName>
              <dataType>false</dataType>
              <encoding>false</encoding>
              <assertions>false</assertions>
              <subresults>false</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename">${results}/GUI/${users}/raw/cpu-${users}.csv</stringProp>
          <longProp name="interval_grouping">1000</longProp>
          <boolProp name="graph_aggregated">false</boolProp>
          <stringProp name="include_sample_labels"></stringProp>
          <stringProp name="exclude_sample_labels"></stringProp>
          <stringProp name="start_offset"></stringProp>
          <stringProp name="end_offset"></stringProp>
          <boolProp name="include_checkbox_state">false</boolProp>
          <boolProp name="exclude_checkbox_state">false</boolProp>
          <collectionProp name="metricConnections">
            <collectionProp name="459191947">
              <stringProp name="1147350053">${ecm}</stringProp>
              <stringProp name="1600768">4444</stringProp>
              <stringProp name="66952">CPU</stringProp>
              <stringProp name="0"></stringProp>
            </collectionProp>
            <collectionProp name="-7759862">
              <stringProp name="37021999">${pg}</stringProp>
              <stringProp name="1600768">4444</stringProp>
              <stringProp name="66952">CPU</stringProp>
              <stringProp name="0"></stringProp>
            </collectionProp>
            <collectionProp name="1403818974">
              <stringProp name="-1281148164">${blade}</stringProp>
              <stringProp name="1600768">4444</stringProp>
              <stringProp name="66952">CPU</stringProp>
              <stringProp name="0"></stringProp>
            </collectionProp>
            <collectionProp name="-1994733646">
              <stringProp name="1224139749">${x207}</stringProp>
              <stringProp reference="../../collectionProp[3]/stringProp[2]"/>
              <stringProp reference="../../collectionProp[3]/stringProp[3]"/>
              <stringProp reference="../../collectionProp[3]/stringProp[4]"/>
            </collectionProp>
            <collectionProp name="1495929486">
              <stringProp name="1147319301">${dbm}</stringProp>
              <stringProp reference="../../collectionProp[2]/stringProp[2]"/>
              <stringProp reference="../../collectionProp[2]/stringProp[3]"/>
              <stringProp reference="../../collectionProp[2]/stringProp[4]"/>
            </collectionProp>
          </collectionProp>
        </kg.apc.jmeter.perfmon.PerfMonCollector>
        <hashTree/>
        <kg.apc.jmeter.perfmon.PerfMonCollector guiclass="kg.apc.jmeter.vizualizers.PerfMonGui" testclass="kg.apc.jmeter.perfmon.PerfMonCollector" testname="jp@gc - PerfMon System Metrics Collector Memory" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>false</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>false</message>
              <threadName>false</threadName>
              <dataType>false</dataType>
              <encoding>false</encoding>
              <assertions>false</assertions>
              <subresults>false</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename">${results}/GUI/${users}/raw/mem-${users}.csv</stringProp>
          <longProp name="interval_grouping">1000</longProp>
          <boolProp name="graph_aggregated">false</boolProp>
          <stringProp name="include_sample_labels"></stringProp>
          <stringProp name="exclude_sample_labels"></stringProp>
          <stringProp name="start_offset"></stringProp>
          <stringProp name="end_offset"></stringProp>
          <boolProp name="include_checkbox_state">false</boolProp>
          <boolProp name="exclude_checkbox_state">false</boolProp>
          <collectionProp name="metricConnections">
            <collectionProp name="-1841522374">
              <stringProp name="1147350053">${ecm}</stringProp>
              <stringProp name="1600768">4444</stringProp>
              <stringProp name="-1993889503">Memory</stringProp>
              <stringProp name="0"></stringProp>
            </collectionProp>
            <collectionProp name="1986493113">
              <stringProp name="37021999">${pg}</stringProp>
              <stringProp name="1600768">4444</stringProp>
              <stringProp name="-1993889503">Memory</stringProp>
              <stringProp name="0"></stringProp>
            </collectionProp>
            <collectionProp name="-896895347">
              <stringProp name="-1281148164">${blade}</stringProp>
              <stringProp name="1600768">4444</stringProp>
              <stringProp name="-1993889503">Memory</stringProp>
              <stringProp name="0"></stringProp>
            </collectionProp>
            <collectionProp name="-480671">
              <stringProp name="1224139749">${x207}</stringProp>
              <stringProp reference="../../collectionProp[3]/stringProp[2]"/>
              <stringProp reference="../../collectionProp[3]/stringProp[3]"/>
              <stringProp reference="../../collectionProp[3]/stringProp[4]"/>
            </collectionProp>
            <collectionProp name="-804784835">
              <stringProp name="1147319301">${dbm}</stringProp>
              <stringProp name="1600768">4444</stringProp>
              <stringProp name="-1993889503">Memory</stringProp>
              <stringProp name="0"></stringProp>
            </collectionProp>
          </collectionProp>
        </kg.apc.jmeter.perfmon.PerfMonCollector>
        <hashTree/>
        <kg.apc.jmeter.perfmon.PerfMonCollector guiclass="kg.apc.jmeter.vizualizers.PerfMonGui" testclass="kg.apc.jmeter.perfmon.PerfMonCollector" testname="jp@gc - PerfMon System Metrics Collector Network IO RX" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>false</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>false</message>
              <threadName>false</threadName>
              <dataType>false</dataType>
              <encoding>false</encoding>
              <assertions>false</assertions>
              <subresults>false</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename">${results}/GUI/${users}/raw/netrx-${users}.csv</stringProp>
          <longProp name="interval_grouping">1000</longProp>
          <boolProp name="graph_aggregated">false</boolProp>
          <stringProp name="include_sample_labels"></stringProp>
          <stringProp name="exclude_sample_labels"></stringProp>
          <stringProp name="start_offset"></stringProp>
          <stringProp name="end_offset"></stringProp>
          <boolProp name="include_checkbox_state">false</boolProp>
          <boolProp name="exclude_checkbox_state">false</boolProp>
          <collectionProp name="metricConnections">
            <collectionProp name="1901027029">
              <stringProp name="1147350053">${ecm}</stringProp>
              <stringProp name="1600768">4444</stringProp>
              <stringProp name="-274342153">Network I/O</stringProp>
              <stringProp name="-2032735023">bytesrecv</stringProp>
            </collectionProp>
            <collectionProp name="1434075220">
              <stringProp name="37021999">${pg}</stringProp>
              <stringProp name="1600768">4444</stringProp>
              <stringProp name="-274342153">Network I/O</stringProp>
              <stringProp name="-2032735023">bytesrecv</stringProp>
            </collectionProp>
            <collectionProp name="-1449313240">
              <stringProp name="-1281148164">${blade}</stringProp>
              <stringProp name="1600768">4444</stringProp>
              <stringProp name="-274342153">Network I/O</stringProp>
              <stringProp name="-2032735023">bytesrecv</stringProp>
            </collectionProp>
            <collectionProp name="-552898564">
              <stringProp name="1224139749">${x207}</stringProp>
              <stringProp reference="../../collectionProp[3]/stringProp[2]"/>
              <stringProp reference="../../collectionProp[3]/stringProp[3]"/>
              <stringProp name="-2032735023">bytesrecv</stringProp>
            </collectionProp>
            <collectionProp name="-1357202728">
              <stringProp name="1147319301">${dbm}</stringProp>
              <stringProp name="1600768">4444</stringProp>
              <stringProp name="-274342153">Network I/O</stringProp>
              <stringProp name="-2032735023">bytesrecv</stringProp>
            </collectionProp>
          </collectionProp>
        </kg.apc.jmeter.perfmon.PerfMonCollector>
        <hashTree/>
        <kg.apc.jmeter.perfmon.PerfMonCollector guiclass="kg.apc.jmeter.vizualizers.PerfMonGui" testclass="kg.apc.jmeter.perfmon.PerfMonCollector" testname="jp@gc - PerfMon System Metrics Collector Network IO TX" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>false</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>false</message>
              <threadName>false</threadName>
              <dataType>false</dataType>
              <encoding>false</encoding>
              <assertions>false</assertions>
              <subresults>false</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename">${results}/GUI/${users}/raw/nettx-${users}.csv</stringProp>
          <longProp name="interval_grouping">1000</longProp>
          <boolProp name="graph_aggregated">false</boolProp>
          <stringProp name="include_sample_labels"></stringProp>
          <stringProp name="exclude_sample_labels"></stringProp>
          <stringProp name="start_offset"></stringProp>
          <stringProp name="end_offset"></stringProp>
          <boolProp name="include_checkbox_state">false</boolProp>
          <boolProp name="exclude_checkbox_state">false</boolProp>
          <collectionProp name="metricConnections">
            <collectionProp name="1797736546">
              <stringProp name="1147350053">${ecm}</stringProp>
              <stringProp name="1600768">4444</stringProp>
              <stringProp name="-274342153">Network I/O</stringProp>
              <stringProp name="-2032704893">bytessent</stringProp>
            </collectionProp>
            <collectionProp name="1330784737">
              <stringProp name="37021999">${pg}</stringProp>
              <stringProp name="1600768">4444</stringProp>
              <stringProp name="-274342153">Network I/O</stringProp>
              <stringProp name="-2032704893">bytessent</stringProp>
            </collectionProp>
            <collectionProp name="-1552603723">
              <stringProp name="-1281148164">${blade}</stringProp>
              <stringProp name="1600768">4444</stringProp>
              <stringProp name="-274342153">Network I/O</stringProp>
              <stringProp name="-2032704893">bytessent</stringProp>
            </collectionProp>
            <collectionProp name="-656189047">
              <stringProp name="1224139749">${x207}</stringProp>
              <stringProp reference="../../collectionProp[3]/stringProp[2]"/>
              <stringProp reference="../../collectionProp[3]/stringProp[3]"/>
              <stringProp name="-2032704893">bytessent</stringProp>
            </collectionProp>
            <collectionProp name="-1460493211">
              <stringProp name="1147319301">${dbm}</stringProp>
              <stringProp name="1600768">4444</stringProp>
              <stringProp name="-274342153">Network I/O</stringProp>
              <stringProp name="-2032704893">bytessent</stringProp>
            </collectionProp>
          </collectionProp>
        </kg.apc.jmeter.perfmon.PerfMonCollector>
        <hashTree/>
        <kg.apc.jmeter.perfmon.PerfMonCollector guiclass="kg.apc.jmeter.vizualizers.PerfMonGui" testclass="kg.apc.jmeter.perfmon.PerfMonCollector" testname="jp@gc - PerfMon System Metrics Collector Disk IO Write" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>false</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>false</message>
              <threadName>false</threadName>
              <dataType>false</dataType>
              <encoding>false</encoding>
              <assertions>false</assertions>
              <subresults>false</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename">${results}/GUI/${users}/raw/write-${users}.csv</stringProp>
          <longProp name="interval_grouping">1000</longProp>
          <boolProp name="graph_aggregated">false</boolProp>
          <stringProp name="include_sample_labels"></stringProp>
          <stringProp name="exclude_sample_labels"></stringProp>
          <stringProp name="start_offset"></stringProp>
          <stringProp name="end_offset"></stringProp>
          <boolProp name="include_checkbox_state">false</boolProp>
          <boolProp name="exclude_checkbox_state">false</boolProp>
          <collectionProp name="metricConnections">
            <collectionProp name="137502094">
              <stringProp name="1147350053">${ecm}</stringProp>
              <stringProp name="1600768">4444</stringProp>
              <stringProp name="2112896831">Disks I/O</stringProp>
              <stringProp name="-633177108">writebytes</stringProp>
            </collectionProp>
            <collectionProp name="-329449715">
              <stringProp name="37021999">${pg}</stringProp>
              <stringProp name="1600768">4444</stringProp>
              <stringProp name="2112896831">Disks I/O</stringProp>
              <stringProp name="-633177108">writebytes</stringProp>
            </collectionProp>
            <collectionProp name="1082129121">
              <stringProp name="-1281148164">${blade}</stringProp>
              <stringProp name="1600768">4444</stringProp>
              <stringProp name="2112896831">Disks I/O</stringProp>
              <stringProp name="-633177108">writebytes</stringProp>
            </collectionProp>
            <collectionProp name="1978543797">
              <stringProp name="1224139749">${x207}</stringProp>
              <stringProp reference="../../collectionProp[3]/stringProp[2]"/>
              <stringProp reference="../../collectionProp[3]/stringProp[3]"/>
              <stringProp reference="../../collectionProp[3]/stringProp[4]"/>
            </collectionProp>
            <collectionProp name="1174239633">
              <stringProp name="1147319301">${dbm}</stringProp>
              <stringProp name="1600768">4444</stringProp>
              <stringProp name="2112896831">Disks I/O</stringProp>
              <stringProp name="-633177108">writebytes</stringProp>
            </collectionProp>
          </collectionProp>
        </kg.apc.jmeter.perfmon.PerfMonCollector>
        <hashTree/>
        <kg.apc.jmeter.perfmon.PerfMonCollector guiclass="kg.apc.jmeter.vizualizers.PerfMonGui" testclass="kg.apc.jmeter.perfmon.PerfMonCollector" testname="jp@gc - PerfMon System Metrics Collector Disk IO Read" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>false</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>false</message>
              <threadName>false</threadName>
              <dataType>false</dataType>
              <encoding>false</encoding>
              <assertions>false</assertions>
              <subresults>false</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename">${results}/GUI/${users}/raw/read-${users}.csv</stringProp>
          <longProp name="interval_grouping">1000</longProp>
          <boolProp name="graph_aggregated">false</boolProp>
          <stringProp name="include_sample_labels"></stringProp>
          <stringProp name="exclude_sample_labels"></stringProp>
          <stringProp name="start_offset"></stringProp>
          <stringProp name="end_offset"></stringProp>
          <boolProp name="include_checkbox_state">false</boolProp>
          <boolProp name="exclude_checkbox_state">false</boolProp>
          <collectionProp name="metricConnections">
            <collectionProp name="1562674137">
              <stringProp name="1147350053">${ecm}</stringProp>
              <stringProp name="1600768">4444</stringProp>
              <stringProp name="2112896831">Disks I/O</stringProp>
              <stringProp name="-1110510443">readbytes</stringProp>
            </collectionProp>
            <collectionProp name="1095722328">
              <stringProp name="37021999">${pg}</stringProp>
              <stringProp name="1600768">4444</stringProp>
              <stringProp name="2112896831">Disks I/O</stringProp>
              <stringProp name="-1110510443">readbytes</stringProp>
            </collectionProp>
            <collectionProp name="-1787666132">
              <stringProp name="-1281148164">${blade}</stringProp>
              <stringProp name="1600768">4444</stringProp>
              <stringProp name="2112896831">Disks I/O</stringProp>
              <stringProp name="-1110510443">readbytes</stringProp>
            </collectionProp>
            <collectionProp name="-891251456">
              <stringProp name="1224139749">${x207}</stringProp>
              <stringProp reference="../../collectionProp[3]/stringProp[2]"/>
              <stringProp reference="../../collectionProp[3]/stringProp[3]"/>
              <stringProp reference="../../collectionProp[3]/stringProp[4]"/>
            </collectionProp>
            <collectionProp name="-1695555620">
              <stringProp name="1147319301">${dbm}</stringProp>
              <stringProp name="1600768">4444</stringProp>
              <stringProp name="2112896831">Disks I/O</stringProp>
              <stringProp name="-1110510443">readbytes</stringProp>
            </collectionProp>
          </collectionProp>
        </kg.apc.jmeter.perfmon.PerfMonCollector>
        <hashTree/>
        <kg.apc.jmeter.jmxmon.JMXMonCollector guiclass="kg.apc.jmeter.vizualizers.JMXMonGui" testclass="kg.apc.jmeter.jmxmon.JMXMonCollector" testname="JBOSS JMX" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>false</time>
              <latency>false</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>false</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>false</dataType>
              <encoding>false</encoding>
              <assertions>false</assertions>
              <subresults>false</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
            </value>
          </objProp>
          <stringProp name="filename">${results}/GUI/${users}/raw/ecmjmx-${users}.csv</stringProp>
          <longProp name="interval_grouping">1000</longProp>
          <boolProp name="graph_aggregated">false</boolProp>
          <stringProp name="include_sample_labels"></stringProp>
          <stringProp name="exclude_sample_labels"></stringProp>
          <stringProp name="start_offset"></stringProp>
          <stringProp name="end_offset"></stringProp>
          <boolProp name="include_checkbox_state">false</boolProp>
          <boolProp name="exclude_checkbox_state">false</boolProp>
          <collectionProp name="samplers">
            <collectionProp name="-509347637">
              <stringProp name="563092484">${ecm1} jboss threads</stringProp>
              <stringProp name="904974450">service:jmx:remoting-jmx://${ecm1}:${ecm_jboss_port}</stringProp>
              <stringProp name="92668751">admin</stringProp>
              <stringProp name="-904532845">Admin!23</stringProp>
              <stringProp name="1641949653">java.lang:type=Threading</stringProp>
              <stringProp name="-158340056">ThreadCount</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1237">false</stringProp>
              <stringProp name="1237">false</stringProp>
            </collectionProp>
            <collectionProp name="120962311">
              <stringProp name="-2117641786">${ecm1} jboss heap alloc</stringProp>
              <stringProp name="904974450">service:jmx:remoting-jmx://${ecm1}:${ecm_jboss_port}</stringProp>
              <stringProp name="92668751">admin</stringProp>
              <stringProp name="-904532845">Admin!23</stringProp>
              <stringProp name="-1508861468">java.lang:type=Memory</stringProp>
              <stringProp name="-687755404">HeapMemoryUsage</stringProp>
              <stringProp name="3599293">used</stringProp>
              <stringProp name="1237">false</stringProp>
              <stringProp name="1237">false</stringProp>
            </collectionProp>
            <collectionProp name="-526606977">
              <stringProp name="-794638674">${ecm1} jboss class loaded   </stringProp>
              <stringProp reference="../../collectionProp[2]/stringProp[2]"/>
              <stringProp reference="../../collectionProp[2]/stringProp[3]"/>
              <stringProp reference="../../collectionProp[2]/stringProp[4]"/>
              <stringProp name="298852167">java.lang:type=ClassLoading</stringProp>
              <stringProp name="1141682300">LoadedClassCount</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1237">false</stringProp>
              <stringProp name="1237">false</stringProp>
            </collectionProp>
            <collectionProp name="-658756915">
              <stringProp name="-2135116939">${ecm1} jboss class unloaded   </stringProp>
              <stringProp reference="../../collectionProp[2]/stringProp[2]"/>
              <stringProp reference="../../collectionProp[2]/stringProp[3]"/>
              <stringProp reference="../../collectionProp[2]/stringProp[4]"/>
              <stringProp reference="../../collectionProp[3]/stringProp[5]"/>
              <stringProp name="1672865045">UnloadedClassCount</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1237">false</stringProp>
              <stringProp name="1237">false</stringProp>
            </collectionProp>
            <collectionProp name="1597588336">
              <stringProp name="1692026860">${ecm1} jboss gc time</stringProp>
              <stringProp reference="../../collectionProp[2]/stringProp[2]"/>
              <stringProp reference="../../collectionProp[2]/stringProp[3]"/>
              <stringProp reference="../../collectionProp[2]/stringProp[4]"/>
              <stringProp name="1647148085">java.lang:type=GarbageCollector,name=G1 Young Generation</stringProp>
              <stringProp name="-691027285">CollectionTime</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1231">true</stringProp>
              <stringProp name="1237">false</stringProp>
            </collectionProp>
            <collectionProp name="-55631413">
              <stringProp name="897712080">${ecm1} jboss gc count</stringProp>
              <stringProp reference="../../collectionProp[2]/stringProp[2]"/>
              <stringProp reference="../../collectionProp[2]/stringProp[3]"/>
              <stringProp reference="../../collectionProp[2]/stringProp[4]"/>
              <stringProp reference="../../collectionProp[5]/stringProp[5]"/>
              <stringProp name="37477617">CollectionCount</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1231">true</stringProp>
              <stringProp name="1237">false</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="ResultCollector.success_only_logging">true</boolProp>
        </kg.apc.jmeter.jmxmon.JMXMonCollector>
        <hashTree/>
        <kg.apc.jmeter.perfmon.PerfMonCollector guiclass="kg.apc.jmeter.vizualizers.PerfMonGui" testclass="kg.apc.jmeter.perfmon.PerfMonCollector" testname="PG JMX " enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>false</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>false</message>
              <threadName>false</threadName>
              <dataType>false</dataType>
              <encoding>false</encoding>
              <assertions>false</assertions>
              <subresults>false</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename">${results}/GUI/${users}/raw/pgjmx-${users}.csv</stringProp>
          <longProp name="interval_grouping">1000</longProp>
          <boolProp name="graph_aggregated">false</boolProp>
          <stringProp name="include_sample_labels"></stringProp>
          <stringProp name="exclude_sample_labels"></stringProp>
          <stringProp name="start_offset"></stringProp>
          <stringProp name="end_offset"></stringProp>
          <boolProp name="include_checkbox_state">false</boolProp>
          <boolProp name="exclude_checkbox_state">false</boolProp>
          <collectionProp name="metricConnections">
            <collectionProp name="862658019">
              <stringProp name="1147679738">${pg1}</stringProp>
              <stringProp name="1600768">4444</stringProp>
              <stringProp name="73589">JMX</stringProp>
              <stringProp name="1492708167">url=localhost\:${pg_tomcat_port}:label=tomcat heap:unit=mb:memory-usage</stringProp>
            </collectionProp>
            <collectionProp name="252046374">
              <stringProp name="-1187101997">${pg1}</stringProp>
              <stringProp reference="../../collectionProp/stringProp[2]"/>
              <stringProp reference="../../collectionProp/stringProp[3]"/>
              <stringProp name="1708554785">url=localhost\:${pg_dve_port}:label=dve heap:unit=mb:memory-usage</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="ResultCollector.success_only_logging">true</boolProp>
        </kg.apc.jmeter.perfmon.PerfMonCollector>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="website" elementType="Argument">
              <stringProp name="Argument.name">website</stringProp>
              <stringProp name="Argument.value">https://ecm156x50.ete.ka.sw.ericsson.se/cloudMgrGui/?</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="password" elementType="Argument">
              <stringProp name="Argument.name">password</stringProp>
              <stringProp name="Argument.value">PerfMaster123</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="vim_zone" elementType="Argument">
              <stringProp name="Argument.name">vim_zone</stringProp>
              <stringProp name="Argument.value">myVzIdx133</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="host" elementType="Argument">
              <stringProp name="Argument.name">host</stringProp>
              <stringProp name="Argument.value">ecm156x50.ete.ka.sw.ericsson.se</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="port" elementType="Argument">
              <stringProp name="Argument.name">port</stringProp>
              <stringProp name="Argument.value">8080</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="ecm" elementType="Argument">
              <stringProp name="Argument.name">ecm</stringProp>
              <stringProp name="Argument.value">ecm156x50.ete.ka.sw.ericsson.se</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="pg" elementType="Argument">
              <stringProp name="Argument.name">pg</stringProp>
              <stringProp name="Argument.value">ecm156x51.ete.ka.sw.ericsson.se</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="blade" elementType="Argument">
              <stringProp name="Argument.name">blade</stringProp>
              <stringProp name="Argument.value">sl210tx3298.ete.ka.sw.ericsson.se</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="x207" elementType="Argument">
              <stringProp name="Argument.name">x207</stringProp>
              <stringProp name="Argument.value">ecm154x207.ete.ka.sw.ericsson.se</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="results" elementType="Argument">
              <stringProp name="Argument.name">results</stringProp>
              <stringProp name="Argument.value">${__P(resultsFolder,/root/apache-jmeter-4.0/log)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="users" elementType="Argument">
              <stringProp name="Argument.name">users</stringProp>
              <stringProp name="Argument.value">${__P(users,1)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="loops" elementType="Argument">
              <stringProp name="Argument.name">loops</stringProp>
              <stringProp name="Argument.value">${__P(loops,1)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="rampup" elementType="Argument">
              <stringProp name="Argument.name">rampup</stringProp>
              <stringProp name="Argument.value">${__P(rampup,1)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dashboard_wait" elementType="Argument">
              <stringProp name="Argument.name">dashboard_wait</stringProp>
              <stringProp name="Argument.value">${__P(dashboard_wait,1)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">1 minute</stringProp>
            </elementProp>
            <elementProp name="wait1" elementType="Argument">
              <stringProp name="Argument.name">wait1</stringProp>
              <stringProp name="Argument.value">1000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">1 minute wait</stringProp>
            </elementProp>
            <elementProp name="wait3" elementType="Argument">
              <stringProp name="Argument.name">wait3</stringProp>
              <stringProp name="Argument.value">3000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">3 second wait</stringProp>
            </elementProp>
            <elementProp name="wait5" elementType="Argument">
              <stringProp name="Argument.name">wait5</stringProp>
              <stringProp name="Argument.value">5000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="wait10" elementType="Argument">
              <stringProp name="Argument.name">wait10</stringProp>
              <stringProp name="Argument.value">10000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="wait25" elementType="Argument">
              <stringProp name="Argument.name">wait25</stringProp>
              <stringProp name="Argument.value">25000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="wait15" elementType="Argument">
              <stringProp name="Argument.name">wait15</stringProp>
              <stringProp name="Argument.value">15000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="wait120" elementType="Argument">
              <stringProp name="Argument.name">wait120</stringProp>
              <stringProp name="Argument.value">120000</stringProp>
              <stringProp name="Argument.desc">2 minutes wait</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="wait900" elementType="Argument">
              <stringProp name="Argument.name">wait900</stringProp>
              <stringProp name="Argument.value">900000</stringProp>
              <stringProp name="Argument.desc">600 seconds = 10 minutes</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="ecm1" elementType="Argument">
              <stringProp name="Argument.name">ecm1</stringProp>
              <stringProp name="Argument.value">ecm156x50.ete.ka.sw.ericsson.se</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="ecm_jboss_port" elementType="Argument">
              <stringProp name="Argument.name">ecm_jboss_port</stringProp>
              <stringProp name="Argument.value">12500</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="pg1" elementType="Argument">
              <stringProp name="Argument.name">pg1</stringProp>
              <stringProp name="Argument.value">ecm156x51.ete.ka.sw.ericsson.se</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="pg_dve_port" elementType="Argument">
              <stringProp name="Argument.name">pg_dve_port</stringProp>
              <stringProp name="Argument.value">7100</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="pg_tomcat_port" elementType="Argument">
              <stringProp name="Argument.name">pg_tomcat_port</stringProp>
              <stringProp name="Argument.value">7101</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dashboard_wait_25" elementType="Argument">
              <stringProp name="Argument.name">dashboard_wait_25</stringProp>
              <stringProp name="Argument.value">25000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dbm" elementType="Argument">
              <stringProp name="Argument.name">dbm</stringProp>
              <stringProp name="Argument.value">${__P(dbm,ecm156x6.ete.ka.sw.ericsson.se)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
