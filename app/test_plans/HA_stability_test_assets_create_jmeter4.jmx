<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="4.0" jmeter="4.0 r1823414">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <com.ericsson.jmeter.ecm.controller.EcmTestAppController guiclass="com.ericsson.jmeter.ecm.controller.EcmTestAppControllerGui" testclass="com.ericsson.jmeter.ecm.controller.EcmTestAppController" testname="Ecm Performance Application Controller" enabled="true"/>
        <hashTree>
          <com.ericsson.jmeter.ecm.sampler.EcmApplicationSampler guiclass="com.ericsson.jmeter.ecm.sampler.EcmApplicationSamplerGui" testclass="com.ericsson.jmeter.ecm.sampler.EcmApplicationSampler" testname="ECM Performance Application Sampler" enabled="true">
            <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="host" elementType="Argument">
                  <stringProp name="Argument.name">host</stringProp>
                  <stringProp name="Argument.value">ecmha-ka26.ete.ka.sw.ericsson.se</stringProp>
                  <stringProp name="Argument.desc">Ecm host name</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="port" elementType="Argument">
                  <stringProp name="Argument.name">port</stringProp>
                  <stringProp name="Argument.value">443</stringProp>
                  <stringProp name="Argument.desc">IP port used for ECM APIs</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="protocol" elementType="Argument">
                  <stringProp name="Argument.name">protocol</stringProp>
                  <stringProp name="Argument.value">https</stringProp>
                  <stringProp name="Argument.desc">Protocol used to connect the server. Valid values are http and https.</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="targetTenant" elementType="Argument">
                  <stringProp name="Argument.name">targetTenant</stringProp>
                  <stringProp name="Argument.value">stabilityTenant0000</stringProp>
                  <stringProp name="Argument.desc">Tenant where the assets are going to be created.</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="targetTenantAdminUser" elementType="Argument">
                  <stringProp name="Argument.name">targetTenantAdminUser</stringProp>
                  <stringProp name="Argument.value">stabilityTenant0000admin</stringProp>
                  <stringProp name="Argument.desc">Admin user in target tenant.</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="targetTenantAdminPassword" elementType="Argument">
                  <stringProp name="Argument.name">targetTenantAdminPassword</stringProp>
                  <stringProp name="Argument.value">PerfMaster123</stringProp>
                  <stringProp name="Argument.desc">Admin password in target tenant.</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="imageName" elementType="Argument">
                  <stringProp name="Argument.name">imageName</stringProp>
                  <stringProp name="Argument.value">image828</stringProp>
                  <stringProp name="Argument.desc">Name of the image used for VMs.</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="imagePath" elementType="Argument">
                  <stringProp name="Argument.name">imagePath</stringProp>
                  <stringProp name="Argument.value">/app/performance_production/misc/images/9mb.qcow2</stringProp>
                  <stringProp name="Argument.desc">Image path on local drive.</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="flavorName" elementType="Argument">
                  <stringProp name="Argument.name">flavorName</stringProp>
                  <stringProp name="Argument.value">tiny828</stringProp>
                  <stringProp name="Argument.desc">Name of the flavor used for VMs.</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="vimzoneHost" elementType="Argument">
                  <stringProp name="Argument.name">vimzoneHost</stringProp>
                  <stringProp name="Argument.value">myVzIdx133-0</stringProp>
                  <stringProp name="Argument.desc">Host - Create objects in this vimzone</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="IPRangeStart" elementType="Argument">
                  <stringProp name="Argument.name">IPRangeStart</stringProp>
                  <stringProp name="Argument.value">10.0.1.0</stringProp>
                  <stringProp name="Argument.desc">IP address from where the IP addresses will start.</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="vappInVdc" elementType="Argument">
                  <stringProp name="Argument.name">vappInVdc</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.desc">Number of VAPPs to be created under each VDC.</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="vnInVdc" elementType="Argument">
                  <stringProp name="Argument.name">vnInVdc</stringProp>
                  <stringProp name="Argument.value">25</stringProp>
                  <stringProp name="Argument.desc">Number of VNs to be created under each VDC.</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="vmInVapp" elementType="Argument">
                  <stringProp name="Argument.name">vmInVapp</stringProp>
                  <stringProp name="Argument.value">25</stringProp>
                  <stringProp name="Argument.desc">Number of VAPPs to be created under each VDC.</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="vnicInVm" elementType="Argument">
                  <stringProp name="Argument.name">vnicInVm</stringProp>
                  <stringProp name="Argument.value">8</stringProp>
                  <stringProp name="Argument.desc">Number of VNICs to be created under each VM.</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="bsvInVm" elementType="Argument">
                  <stringProp name="Argument.name">bsvInVm</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.desc">Number of BSVs to be created under each VM.</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="vdcIndex" elementType="Argument">
                  <stringProp name="Argument.name">vdcIndex</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.desc">Number representing index within Vimzone in VDC name.</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="vimzoneIndex" elementType="Argument">
                  <stringProp name="Argument.name">vimzoneIndex</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.desc">Number representing vimzone index in VDC name.</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="classname">com.ericsson.ecm.performance.applications.loading.CreateCertificationPhysicalAssetsV2</stringProp>
          </com.ericsson.jmeter.ecm.sampler.EcmApplicationSampler>
          <hashTree/>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="LoopVimzoneIndex" enabled="false">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">{vimCount}</stringProp>
        </LoopController>
        <hashTree>
          <com.ericsson.jmeter.ecm.controller.EcmTestAppController guiclass="com.ericsson.jmeter.ecm.controller.EcmTestAppControllerGui" testclass="com.ericsson.jmeter.ecm.controller.EcmTestAppController" testname="Ecm Performance Application Controller" enabled="false"/>
          <hashTree>
            <com.ericsson.jmeter.ecm.sampler.EcmApplicationSampler guiclass="com.ericsson.jmeter.ecm.sampler.EcmApplicationSamplerGui" testclass="com.ericsson.jmeter.ecm.sampler.EcmApplicationSampler" testname="ECM Performance Application Sampler" enabled="false">
              <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="host" elementType="Argument">
                    <stringProp name="Argument.name">host</stringProp>
                    <stringProp name="Argument.value">{host}</stringProp>
                    <stringProp name="Argument.desc">Ecm host name</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="port" elementType="Argument">
                    <stringProp name="Argument.name">port</stringProp>
                    <stringProp name="Argument.value">443</stringProp>
                    <stringProp name="Argument.desc">IP port used for ECM APIs</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="protocol" elementType="Argument">
                    <stringProp name="Argument.name">protocol</stringProp>
                    <stringProp name="Argument.value">https</stringProp>
                    <stringProp name="Argument.desc">Protocol used to connect the server. Valid values are http and https.</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="loginTenant" elementType="Argument">
                    <stringProp name="Argument.name">loginTenant</stringProp>
                    <stringProp name="Argument.value">{loginTenant}</stringProp>
                    <stringProp name="Argument.desc">Tenant name used for initial login</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="userName" elementType="Argument">
                    <stringProp name="Argument.name">userName</stringProp>
                    <stringProp name="Argument.value">{userName}</stringProp>
                    <stringProp name="Argument.desc">Tenant&apos;s user name</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="password" elementType="Argument">
                    <stringProp name="Argument.name">password</stringProp>
                    <stringProp name="Argument.value">{password}</stringProp>
                    <stringProp name="Argument.desc">Tenant&apos;s password</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="tenantName" elementType="Argument">
                    <stringProp name="Argument.name">tenantName</stringProp>
                    <stringProp name="Argument.value">{vimTenant}</stringProp>
                    <stringProp name="Argument.desc">The name of vimzone admin tenant.</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="adminName" elementType="Argument">
                    <stringProp name="Argument.name">adminName</stringProp>
                    <stringProp name="Argument.value">{vimUser}</stringProp>
                    <stringProp name="Argument.desc">The user name for vimzone admin.</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="adminPassword" elementType="Argument">
                    <stringProp name="Argument.name">adminPassword</stringProp>
                    <stringProp name="Argument.value">{vimPassword}</stringProp>
                    <stringProp name="Argument.desc">The password for vimzone admin.</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="vimHost" elementType="Argument">
                    <stringProp name="Argument.name">vimHost</stringProp>
                    <stringProp name="Argument.value">{vimAddress}</stringProp>
                    <stringProp name="Argument.desc">VimZone host (IPs or DNS name)</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="name" elementType="Argument">
                    <stringProp name="Argument.name">name</stringProp>
                    <stringProp name="Argument.value">{vimBaseName}-${__jm__LoopVimzoneIndex__idx}</stringProp>
                    <stringProp name="Argument.desc">Vimzone Name</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="domain" elementType="Argument">
                    <stringProp name="Argument.name">domain</stringProp>
                    <stringProp name="Argument.value">Default</stringProp>
                    <stringProp name="Argument.desc">admin user domain</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="osVersion" elementType="Argument">
                    <stringProp name="Argument.name">osVersion</stringProp>
                    <stringProp name="Argument.value">{osVersion}</stringProp>
                    <stringProp name="Argument.desc">Openstack version (kilo, newton, ...)</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="classname">com.ericsson.ecm.performance.applications.loading.RegisterVimZone</stringProp>
            </com.ericsson.jmeter.ecm.sampler.EcmApplicationSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.SynthesisReportGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Synthesis Report (filtered)" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">/app/register_vimzones.csv</stringProp>
          <longProp name="interval_grouping">500</longProp>
          <boolProp name="graph_aggregated">false</boolProp>
          <stringProp name="include_sample_labels"></stringProp>
          <stringProp name="exclude_sample_labels"></stringProp>
          <stringProp name="start_offset"></stringProp>
          <stringProp name="end_offset"></stringProp>
          <boolProp name="include_checkbox_state">false</boolProp>
          <boolProp name="exclude_checkbox_state">false</boolProp>
          <boolProp name="ResultCollector.success_only_logging">true</boolProp>
        </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">/app/register_vimzones.txt</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
